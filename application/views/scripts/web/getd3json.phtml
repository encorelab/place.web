// set here the max number of charactors for a label
var labelLength = 12; 

var labelType, useGradients, nativeTextSupport, animate;

// common functions
function truncateName(name)
{
	return name.substring(0,labelLength) + " ...";
	//node.name.trim().substring(0, 20).split(" ").slice(0, -1).join(" ") + "...";
}

(function() {
  var ua = navigator.userAgent,
      iStuff = ua.match(/iPhone/i) || ua.match(/iPad/i),
      typeOfCanvas = typeof HTMLCanvasElement,
      nativeCanvasSupport = (typeOfCanvas == 'object' || typeOfCanvas == 'function'),
      textSupport = nativeCanvasSupport
        && (typeof document.createElement('canvas').getContext('2d').fillText == 'function');
  //I'm setting this based on the fact that ExCanvas provides text support for IE
  //and that as of today iPhone/iPad current text support is lame
  labelType = (!nativeCanvasSupport || (textSupport && !iStuff))? 'Native' : 'HTML';
  nativeTextSupport = labelType == 'Native';
  useGradients = nativeCanvasSupport;
  animate = !(iStuff || !nativeCanvasSupport);
})();

var Log = {
  elem: false,
  write: function(text){
    if (!this.elem)
    this.elem = document.getElementById('log');
    this.elem.innerHTML = text;
    this.elem.style.left = (500 - this.elem.offsetWidth / 2) + 'px';
  }
};

<?php
if($this->vizType==1) 
{
?>
function init(){
    //init data
    var json = <?php echo $this->d3JsonData;?>;
    //end
    var infovis = document.getElementById('infovis');
    //var w = infovis.offsetWidth - 50, h = infovis.offsetHeight - 50;

    var w = $(window).width()-25, h = $(window).height()-40;
    
    //init Hypertree
    var ht = new $jit.Hypertree({
      //id of the visualization container
      injectInto: 'infovis',
      //canvas width and height
      width: w,
      height: h,
      //Change node and edge styles such as
      //color, width and dimensions.
      Node: {
       	  overridable: true,
          dim: 10,
          color: "#DD9E37"
      },
      Edge: {
          lineWidth: 2,
          color: "#DBDBDB"
      },
      onBeforeCompute: function(node){
          Log.write("centering");
      },
      //Attach event handlers and add text to the
      //labels. This method is only triggered on label
      //creation
      onCreateLabel: function(domElement, node){
          domElement.innerHTML = node.name;
          $jit.util.addEvent(domElement, 'click', function () {
              ht.onClick(node.id);
          });
      },
      //Change node styles when labels are placed
      //or moved.
      onPlaceLabel: function(domElement, node){
          var style = domElement.style;
          style.display = '';
          style.cursor = 'pointer';
          if (node._depth <= 1) {
              style.fontSize = "0.8em";
              style.color = "#555";

          } else if(node._depth == 2){
              style.fontSize = "0.7em";
              style.color = "#555";

          } else {
              style.display = 'none';
          }

          var left = parseInt(style.left);
          var w = domElement.offsetWidth;
          style.left = (left - w / 2) + 'px';
      },
      
      onAfterCompute: function(){
          Log.write("");
          
          //Build the right column relations list.
          //This is done by collecting the information (stored in the data property)
          //for all the nodes adjacent to the centered node.
          var node = ht.graph.getClosestNodeToOrigin("current");
          var html = "<h4>" + node.name + "</h4><b>Connections:</b>";
          html += "<ul>";
          node.eachAdjacency(function(adj){
              var child = adj.nodeTo;
              if (child.data) {
                  var rel = (child.data.band == node.name) ? child.data.relation : node.data.relation;
                  //html += "<li>" + child.name + " " + "<div class=\"relation\">(relation: " + rel + ")</div></li>";
                  html += "<li>" + child.name + " " + "</li>";
                  
              }
          });
          html += "</ul>";
          $jit.id('inner-details').innerHTML = html;
      }
    });

    //load JSON data.
    ht.loadJSON(json);
    //compute positions and plot.
    ht.refresh();
    //end
    ht.controller.onAfterCompute();
}
<?php
} // end if 
?>

<?php
if($this->vizType==2) 
{
?>

//////////////////////////////////////////////////////////
function init2(){
    //init data
    var json = <?php echo $this->d3JsonData;?>;

    // set width and height of parent container
    $("#infovis").width($(window).width()-230);
    $("#infovis").height($(window).height()-120);

    //init RGraph
    var rgraph = new $jit.RGraph({
        //Where to append the visualization
        injectInto: 'infovis',
        //Optional: create a background canvas that plots
        //concentric circles.
        background: {
          CanvasStyles: {
		lineWidth: 1,
		strokeStyle: '#E6E8FA',
		alpha: 1
          }
        },
        //Add navigation capabilities:
        //zooming by scrolling and panning.
        Navigation: {
          enable: true,
          panning: true,
          zooming: 150
        },
        //Set Node and Edge styles.
        Node: {
            //color: '#ddeeff'
        	overridable: true,
        	dim: 7,
        	color: '#ccc'
        		
        },
        
        Edge: {
          color: '#717370',
          lineWidth: '0.3',
          type: 'line'
        },

        Tips: {  
          enable: true,  
          type: 'HTML',  
          offsetX: 10,  
          offsetY: 10,
          
          onShow: function(tip, node) {
        	  
        	  if(node.data.votes=="") {
        	  tip.innerHTML = "<strong>" + node.name + "</strong>";
               		if(node.data.author!="") {
      			tip.innerHTML += "<br/>Created by: " + node.data.author;
        		} 
	      	  } else {
    			  tip.innerHTML = "Votes: " + node.data.votes;
      		  }
	  }
	},
        
        onBeforeCompute: function(node){
            Log.write("centering " + node.name + "...");

            //Make right column relations list.  
        var html = "";
		if(node.data.elo=="Example")
		{
				url = '"/example/show?id='+ node.data.ref_id +'"';
	            html = "<div class='viz-title-link'>[Example]<h4><br/><a href='#' onClick='webLinkToContent("+url+")'>" + node.name + "</a></h4></div>";
	            if(node.data.is_video=='1')
	            {
	            	html += ""+loadVideolayer()+"";
	            } else {
	            	html += "<div>"+loadContentImage(node.data.media_content)+"</div>";
	            }
	            html += "<div>"+node.data.content+"</div>";
	            html += "<div>Created by: <b>"+node.data.author+"</b></div>";

		} else if (node.data.elo=="Question") {
				url = '"/question/show?id='+ node.data.ref_id +'"';
	            html = "<div class='viz-title-link'>[Question]<br/><h4><a href='#' onClick='webLinkToContent("+url+")'>" + node.name + "</a></h4></div>";
	            if(node.data.is_video=='1')
	            {
	            	html += ""+loadVideolayer()+"";
	            } else {
	            	html += "<div>"+loadContentImage(node.data.media_content)+"</div>";
	            }
	            html += "<div>"+node.data.content+"</div>";
	            html += "<div>Created by: <b>"+node.data.author+"</b></div>";
		} else {
			html = "<h4>" + node.name + "</h4>";
		}
            // add data from relation att
            //html += node.data.relation; // still working on this ;)


            //Add the relation list in the right column.
            //This list is taken from the data property of each JSON node.
            $jit.id('inner-details').innerHTML = html;
            if(node.data.is_video=='1') {
            	loadVideoFile(node.data.media_content);
            }
        },

        //Add the name of the node in the correponding label
        //and a click handler to move the graph.
        //This method is called once, on label creation.
        onCreateLabel: function(domElement, node){
            
			if(node.data.elo=="Example")
			{
				// truncate node name 
				if(node.name.length>labelLength)
				{
					domElement.innerHTML = truncateName(node.name);
				} else {
					domElement.innerHTML = node.name;
				}
				
			} else {
				domElement.innerHTML = ""+node.name;
			}

            domElement.onclick = function(){
                rgraph.onClick(node.id, {
                    onComplete: function() {
                        Log.write("");
                    }
                });
            };
        },
        
        onAfterCompute: function(){

            
        },
        //Change some label dom properties.
        //This method is called each time a label is plotted.
        onPlaceLabel: function(domElement, node){
            var style = domElement.style;
            style.display = '';
            style.cursor = 'pointer';

            if (node._depth <= 1) {
                style.fontSize = "0.8em";
                style.color = "#000";
            
            } else if(node._depth == 2){
                style.fontSize = "0.7em";
                style.color = "#494949";

            } else if(node._depth == 3){
                style.fontSize = "0.6em";
                style.color = "#494949";

            } else {
                style.display = 'none';
            }

            var left = parseInt(style.left);
            var w = domElement.offsetWidth;
            style.left = (left - w / 2) + 'px';
        }
    });
    //load JSON data
    rgraph.loadJSON(json);
    //trigger small animation
    rgraph.graph.eachNode(function(n) {
      var pos = n.getPos();
      pos.setc(-200, -200);
    });
    rgraph.compute('end');
    rgraph.fx.animate({
      modes:['polar'],
      duration: 800
    });
    //end
    //append information about the root relations in the right column
    //Make right column relations list.  
    $jit.id('inner-details').innerHTML = "<h4>" + rgraph.graph.getNode(rgraph.root).name + "</h4>";
//    $jit.id('inner-details').innerHTML += "<b>Connections:</b>";
//    $jit.id('inner-details').innerHTML += rgraph.graph.getNode(rgraph.root).data.relation;
}


<?php
} // end if 
?>

<?php
if($this->vizType==3) 
{
?>

///////////////

function init3()
{
	  // init data
	  var json = <?php echo $this->d3JsonData;?>;

	  $("#infovis").width($(window).width()-230);
	  $("#infovis").height($(window).height()-120);

	  // end
	  // init ForceDirected
	  var fd = new $jit.ForceDirected({
	    //id of the visualization container
	    injectInto: 'infovis',
	    //Enable zooming and panning
	    //with scrolling and DnD
	    Navigation: {
	      enable: true,
	      type: 'Native',
	      //Enable panning events only if we're dragging the empty
	      //canvas (and not a node).
	      panning: 'avoid nodes',
	      zooming: 150 //zoom speed. higher is more sensible
	    },
	    // Change node and edge styles such as
	    // color and width.
	    // These properties are also set per node
	    // with dollar prefixed data-properties in the
	    // JSON structure.
	    Node: {
	      overridable: true,
	      color: '#DD9E37',
	      dim: 7
	    },
	    Edge: {
	      overridable: true,
	      color: '#BDBDBD',
	      lineWidth: 0.4
	    },
        Tips: {  
            enable: true,  
            type: 'HTML',  
            offsetX: 10,  
            offsetY: 10,
            
            onShow: function(tip, node) {
          	  
              if(node.data.elo=="Example" || node.data.elo=="Question") {
          	  tip.innerHTML = "<strong>" + node.name + "</strong>";
                 		if(node.data.author!="") {
        			tip.innerHTML += "<br/>Created by: " + node.data.author;
          		} 
  	      	  } else if(node.data.elo=="Tag") {
      			  tip.innerHTML = "Votes: " + node.data.votes;
        	  } else {
        		  tip.innerHTML = node.name;
        	  }
            }
        },
	    // Add node events
	    Events: {
	      enable: true,
	      type: 'Native',
	      //Change cursor style when hovering a node
	      onMouseEnter: function() {
	        fd.canvas.getElement().style.cursor = 'move';
	      },
	      onMouseLeave: function() {
	        fd.canvas.getElement().style.cursor = '';
	      },
	      //Update node positions when dragged
	      onDragMove: function(node, eventInfo, e) {
	        var pos = eventInfo.getPos();
	        node.pos.setc(pos.x, pos.y);
	        fd.plot();
	      },
	      //Implement the same handler for touchscreens
	      onTouchMove: function(node, eventInfo, e) {
	        $jit.util.event.stop(e); //stop default touchmove event
	        this.onDragMove(node, eventInfo, e);
	      }
	    },
	    //Number of iterations for the FD algorithm
	    iterations: 200,
	    //Edge length
	    levelDistance: 100,
	    // This method is only triggered
	    // on label creation and only for DOM labels (not native canvas ones).
	    onCreateLabel: function(domElement, node){
	      // Create a 'name' and 'close' buttons and add them
	      // to the main node label
	      var nameContainer = document.createElement('span'),
	      closeButton = document.createElement('span'),
	      style = nameContainer.style;
	      nameContainer.className = 'name';
	      
	      if(node.data.elo=="Example" )
		  {
				// truncate node name 
				if(node.name.length>labelLength)
				{
					nameContainer.innerHTML = truncateName(node.name);
				} else {
					nameContainer.innerHTML = node.name;
				}
		  } else {
			  nameContainer.innerHTML = ""+node.name;
		  }
	      //closeButton.className = 'close';
	      //closeButton.innerHTML = 'x';
	      domElement.appendChild(nameContainer);
	      //domElement.appendChild(closeButton);
	      //style.fontSize = "1em";
	      //style.color = "#000";
	      //Fade the node and its connections when
	      //clicking the close button
	      closeButton.onclick = function() {
	        node.setData('alpha', 0, 'end');
	        node.eachAdjacency(function(adj) {
	          adj.setData('alpha', 0, 'end');
	        });
	        fd.fx.animate({
	          modes: ['node-property:alpha',
	                  'edge-property:alpha'],
	          duration: 500
	        });
	      };
	      //Toggle a node selection when clicking
	      //its name. This is done by animating some
	      //node styles like its dimension and the color
	      //and lineWidth of its adjacencies.
	      nameContainer.onclick = function() {
	        //set final styles
	        fd.graph.eachNode(function(n) {
	          if(n.id != node.id) delete n.selected;
	          n.setData('dim', 7, 'end');
	          n.eachAdjacency(function(adj) {
	            adj.setDataset('end', {
	              lineWidth: 0.4,
	              color: '#ccc'
	            });
	          });
	        });
	        if(!node.selected) {
	          node.selected = true;
	          node.setData('dim', 17, 'end');
	          node.eachAdjacency(function(adj) {
	            adj.setDataset('end', {
	              lineWidth: 2.5,
	              color: '#36acfb'
	            });
	          });
	        } else {
	          delete node.selected;
	        }
	        //trigger animation to final styles
	        fd.fx.animate({
	          modes: ['node-property:dim',
	                  'edge-property:lineWidth:color'],
	          duration: 500
	        });
	        // Build the right column relations list.
	        // This is done by traversing the clicked node connections.

            //add link and content of the example   
	        var html = "";
			if(node.data.elo=="Example")
			{
					url = '"/example/show?id='+ node.data.ref_id +'"';
		            html = "<div class='viz-title-link'>[Example]<h4><br/><a href='#' onClick='webLinkToContent("+url+")'>" + node.name + "</a></h4></div>";
		            if(node.data.is_video=='1')
		            {
		            	html += ""+loadVideolayer()+"";
		            } else {
		            	html += "<div>"+loadContentImage(node.data.media_content)+"</div>";
		            }
		            html += "<div>"+node.data.content+"</div>";
		            html += "<div>Created by: <b>"+node.data.author+"</b><br/><br/></div>";

			} else if (node.data.elo=="Question") {
					url = '"/question/show?id='+ node.data.ref_id +'"';
		            html = "<div class='viz-title-link'>[Question]<br/><h4><a href='#' onClick='webLinkToContent("+url+")'>" + node.name + "</a></h4></div>";
		            if(node.data.is_video=='1')
		            {
		            	html += ""+loadVideolayer()+"";
		            } else {
		            	html += "<div>"+loadContentImage(node.data.media_content)+"</div>";
		            }
		            html += "<div>"+node.data.content+"</div>";
		            html += "<div>Created by: <b>"+node.data.author+"</b><br/><br/></div>";

			} else {
				html = "<h4>" + node.name + "</h4>";
			}

	        html += "<b> Connections:</b><ul><li>",
	            list = [];
	        node.eachAdjacency(function(adj){
	          if(adj.getData('alpha')) list.push(adj.nodeTo.name);
	        });
	        //append connections information
	        $jit.id('inner-details').innerHTML = html + list.join("</li><li>") + "</li></ul>";
            if(node.data.is_video=='1') {
            	loadVideoFile(node.data.media_content);
            }
	      };
	    },
	    // Change node styles when DOM labels are placed
	    // or moved.
	    onPlaceLabel: function(domElement, node){
	      var style = domElement.style;
	      var left = parseInt(style.left);
	      var top = parseInt(style.top);
	      var w = domElement.offsetWidth;
	      style.left = (left - w / 2) + 'px';
	      style.top = (top + 2) + 'px';
	      style.display = '';
	    }
	  });
	  // load JSON data.
	  fd.loadJSON(json);
	  // compute positions incrementally and animate.
	  fd.computeIncremental({
	    iter: 5,
	    property: 'end',
	    onStep: function(perc){
	      Log.write(perc + '% loaded...');
	    },
	    onComplete: function(){
	      Log.write('');
	      fd.animate({
	        modes: ['linear'],
	        transition: $jit.Trans.Elastic.easeOut,
	        duration: 1000
	      });
	    }
	  });
	  // end
}	
<?php
} // end if 
?>