var labelType, useGradients, nativeTextSupport, animate;

(function() {
  var ua = navigator.userAgent,
      iStuff = ua.match(/iPhone/i) || ua.match(/iPad/i),
      typeOfCanvas = typeof HTMLCanvasElement,
      nativeCanvasSupport = (typeOfCanvas == 'object' || typeOfCanvas == 'function'),
      textSupport = nativeCanvasSupport
        && (typeof document.createElement('canvas').getContext('2d').fillText == 'function');
  //I'm setting this based on the fact that ExCanvas provides text support for IE
  //and that as of today iPhone/iPad current text support is lame
  labelType = (!nativeCanvasSupport || (textSupport && !iStuff))? 'Native' : 'HTML';
  nativeTextSupport = labelType == 'Native';
  useGradients = nativeCanvasSupport;
  animate = !(iStuff || !nativeCanvasSupport);
})();

var Log = {
  elem: false,
  write: function(text){
    if (!this.elem)
      this.elem = document.getElementById('log');
    this.elem.innerHTML = text;
    this.elem.style.left = (500 - this.elem.offsetWidth / 2) + 'px';
  }
};


function init(){
    //init data
    var json = <?php echo $this->d3JsonData;?>;
    //end
    var infovis = document.getElementById('infovis');
    var w = infovis.offsetWidth - 50, h = infovis.offsetHeight - 50;
    
    //init Hypertree
    var ht = new $jit.Hypertree({
      //id of the visualization container
      injectInto: 'infovis',
      //canvas width and height
      width: w,
      height: h,
      //Change node and edge styles such as
      //color, width and dimensions.
      Node: {
       	  overridable: true,
          dim: 10,
          color: "#DD9E37"
      },
      Edge: {
          lineWidth: 2,
          color: "#DBDBDB"
      },
      onBeforeCompute: function(node){
          Log.write("centering");
      },
      //Attach event handlers and add text to the
      //labels. This method is only triggered on label
      //creation
      onCreateLabel: function(domElement, node){
          domElement.innerHTML = node.name;
          $jit.util.addEvent(domElement, 'click', function () {
              ht.onClick(node.id);
          });
      },
      //Change node styles when labels are placed
      //or moved.
      onPlaceLabel: function(domElement, node){
          var style = domElement.style;
          style.display = '';
          style.cursor = 'pointer';
          if (node._depth <= 1) {
              style.fontSize = "0.8em";
              style.color = "#555";

          } else if(node._depth == 2){
              style.fontSize = "0.7em";
              style.color = "#555";

          } else {
              style.display = 'none';
          }

          var left = parseInt(style.left);
          var w = domElement.offsetWidth;
          style.left = (left - w / 2) + 'px';
      },
      
      onAfterCompute: function(){
          Log.write("done");
          
          //Build the right column relations list.
          //This is done by collecting the information (stored in the data property)
          //for all the nodes adjacent to the centered node.
          var node = ht.graph.getClosestNodeToOrigin("current");
          var html = "<h4>" + node.name + "</h4><b>Connections:</b>";
          html += "<ul>";
          node.eachAdjacency(function(adj){
              var child = adj.nodeTo;
              if (child.data) {
                  var rel = (child.data.band == node.name) ? child.data.relation : node.data.relation;
                  //html += "<li>" + child.name + " " + "<div class=\"relation\">(relation: " + rel + ")</div></li>";
                  html += "<li>" + child.name + " " + "</li>";
                  
              }
          });
          html += "</ul>";
          $jit.id('inner-details').innerHTML = html;
      }
    });

    //load JSON data.
    ht.loadJSON(json);
    //compute positions and plot.
    ht.refresh();
    //end
    ht.controller.onAfterCompute();
}

//////////////////////////////////////////////////////////
function init1(){
    //init data
    var json = <?php echo $this->d3JsonData;?>;

    //init RGraph
    var rgraph = new $jit.RGraph({
        //Where to append the visualization
        injectInto: 'infovis',
        //Optional: create a background canvas that plots
        //concentric circles.
        background: {
          CanvasStyles: {
		lineWidth: 1,
		strokeStyle: '#E6E8FA',
		alpha: 1
          }
        },
        //Add navigation capabilities:
        //zooming by scrolling and panning.
        Navigation: {
          enable: true,
          panning: true,
          zooming: 15
        },
        //Set Node and Edge styles.
        Node: {
            //color: '#ddeeff'
        	overridable: true,
        	dim: 7,
        	color: '#ccc'
        		
        },
        
        Edge: {
          color: '#717370',
          lineWidth: '0.3',
          type: 'line'
        },

	Tips: {  
          enable: true,  
          type: 'HTML',  
          offsetX: 10,  
          offsetY: 10,  
          onShow: function(tip, node) {
        	  
    	  if(node.data.votes=="") {
        	  tip.innerHTML = "<strong>" + node.name + "</strong>";
               		if(node.data.author!="") {
      			tip.innerHTML += "<br/>Created by: " + node.data.author;
        		} 
	      	  } else {
    			  tip.innerHTML = "Votes: " + node.data.votes;
      		  }
	  }
	},
        
        onBeforeCompute: function(node){
            Log.write("centering " + node.name + "...");

            //Make right column relations list.  
            var html = "";
		if(node.data.elo=="Example")
		{
	            html = "[Example]<h4><a href='/example/show?id="+ node.data.ref_id +"' target='_top'>" + node.name + "</a></h4>";

		} else if (node.data.elo=="Question") {

	            html = "[Question]<h4><a href='/question/show?id="+ node.data.ref_id +"' target='_top'>" + node.name + "</a></h4>";

		} else {
			html = "<h4>" + node.name + "</h4>";
		}
		

            // add data from relation att
            //html += node.data.relation; // still working on this ;)


            //Add the relation list in the right column.
            //This list is taken from the data property of each JSON node.
            $jit.id('inner-details').innerHTML = html;
        },

        //Add the name of the node in the correponding label
        //and a click handler to move the graph.
        //This method is called once, on label creation.
        onCreateLabel: function(domElement, node){
            domElement.innerHTML = ""+node.name;
            domElement.onclick = function(){
                rgraph.onClick(node.id, {
                    onComplete: function() {
                        Log.write("done");
                    }
                });
            };
        },
        
        onAfterCompute: function(){

            
        },
        //Change some label dom properties.
        //This method is called each time a label is plotted.
        onPlaceLabel: function(domElement, node){
            var style = domElement.style;
            style.display = '';
            style.cursor = 'pointer';

            if (node._depth <= 1) {
                style.fontSize = "0.8em";
                style.color = "#000";
            
            } else if(node._depth == 2){
                style.fontSize = "0.7em";
                style.color = "#494949";

            } else if(node._depth == 3){
                style.fontSize = "0.6em";
                style.color = "#494949";

            } else {
                style.display = 'none';
            }

            var left = parseInt(style.left);
            var w = domElement.offsetWidth;
            style.left = (left - w / 2) + 'px';
        }
    });
    //load JSON data
    rgraph.loadJSON(json);
    //trigger small animation
    rgraph.graph.eachNode(function(n) {
      var pos = n.getPos();
      pos.setc(-200, -200);
    });
    rgraph.compute('end');
    rgraph.fx.animate({
      modes:['polar'],
      duration: 2000
    });
    //end
    //append information about the root relations in the right column
    //Make right column relations list.  
    $jit.id('inner-details').innerHTML = "<h4>" + rgraph.graph.getNode(rgraph.root).name + "</h4>";
//    $jit.id('inner-details').innerHTML += "<b>Connections:</b>";
//    $jit.id('inner-details').innerHTML += rgraph.graph.getNode(rgraph.root).data.relation;

}
